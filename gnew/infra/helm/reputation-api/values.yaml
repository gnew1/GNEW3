image: 
  repository: gnew/reputation-api 
  tag: v0.1.0 
env: 
  REP_DATA_DIR: /data/reputation 
  REPUTATION_REGISTRY: "0xReputationRootRegistry" 
  GNEW_RPC_URL: https://rpc.gnew.example 
ingress: 
  enabled: true 
  hosts: [ "reputation.api.gnew.example" ] 
resources: 
  requests: { cpu: "100m", memory: "256Mi" } 
  limits: { cpu: "500m", memory: "512Mi" } 
 
 
Runbooks (extracto) 
● Carga de datos (N124): publicar scores.jsonl + meta.json a 
/data/reputation/<epoch>/. 
● Verificación: POST /v1/verify debe corresponder al getRoot(epoch) del 
ReputationRootRegistry. 
● Appeals: revisar diariamente la carpeta appeals/; actualizar status (añadir 
updates[]). 
● Privacidad: no registrar PII; los adjuntos deben ser URLs (idealmente IPFS). 
DoD — Checklist 
● Panel con score, breakdown y línea temporal. 
● Explicación legible (tabla + narrativas + tips). 
● Verificación de Merkle root (on‑chain) accesible desde UI. 
● Appeal con envío y seguimiento. 
● APIs y Helm de despliegue. 
Siguientes pasos 
● Añadir what‑if más fiel (aplicando half‑life real y caps por tipo). 
● Integrar notificaciones del estado del appeal (email/Push). 
● Exponer descarga de artefactos (scores, meta) desde el panel. 
● Métricas UX (tasa de appeals, tiempos de resolución). 
programa a nivel de detalle para GNEW N130 13.10 Control de consentimiento (Prompt 130) 
Objetivo: Centro de permisos por dato/uso. Roles: Privacidad, Back, Front. DoD: opt-in/out 
auditable. 
ChatGPT Plus 
Pensó durante 1m 0s 
¡Vamos! Aquí tienes el programa a nivel de detalle y entrega para GNEW N130 — 13.10 
Control de consentimiento. Incluye arquitectura, entregables, APIs, esquemas de datos, 
eventos, anclaje auditable, componentes de UI, pruebas, CI/CD, observabilidad y playbooks; 
además, te dejo código base listo para pegar en el monorepo 
(TypeScript/React/Solidity/YAML/SQL), siguiendo tus convenciones globales (GitFlow, OIDC 
secrets, Docusaurus, OpenTelemetry, i18n, GDPR-by-design). 
Objetivo 
Centro de permisos por dato/uso (propósito de tratamiento) con opt‑in/opt‑out auditable: 
granular, versionado, regionalizable, con registro inmutable (hashing + anclaje por lotes 
on‑chain), exportable y con señales externas (GPC/DNT). 
Roles 
● Privacidad (lead): taxonomía de propósitos, textos legales, mapeo de bases jurídicas, 
regiones/edad. 
● Backend: servicio de consentimiento, auditoría, eventos, anclaje on‑chain. 
● Frontend: Centro de permisos (web/app), modal de consentimiento, recibos/descargas, 
accesibilidad e i18n. 
Stack & Convenciones 
● BE: Node.js + TypeScript, Express, PostgreSQL (Prisma), Kafka/NATS (eventos), 
OpenTelemetry, Zod/JSON Schema, OpenAPI 3.1. 
● FE: React 18 + TypeScript, Next.js, i18n, WCAG AA, Zustand. 
● On‑chain (auditoría): Solidity (Audit Anchor) + Hardhat; anclaje de raíz de Merkle por 
lote. 
● Seguridad: SBOM (Syft), firmas (Cosign), SLSA, OIDC to secrets, datos 
seudonimizados. 
● Docs: Docusaurus (“Privacidad/Consent”), runbooks. 
Entregables 
1. Servicio consent-svc con API v1, esquema de DB y registro auditable (hash por 
evento + Merkle root por lote + anclaje on‑chain). 
2. Centro de permisos (página y modal) con matriz Dato x Uso, recibo de 
consentimiento, descargas (CSV/JSON), importación GPC. 
3. Catálogo de propósitos versionado con textos e i18n. 
4. Eventos consent.decision.created|updated|withdrawn (Kafka/NATS) y 
webhooks firmados. 
5. Pruebas (unit/e2e), OpenAPI publicada, dashboards (métricas, ratio opt‑in/opt‑out). 
6. Playbooks: anclaje, verificación, rotación, export legal/DSAR. 
DoD (Definition of Done) 
● Opt‑in/opt‑out auditable: cada cambio genera ConsentEvent con hash, firma de 
servidor y anclaje periódico (≤ 1h) del lote. 
● Export sujeto (CSV+JSON), prueba de consentimiento recuperable por receipt_id. 
● GPC/DNT respetado y registrado. 
● i18n, WCAG AA, latencia P95 < 250ms en lectura, < 500ms en escritura. 
● Data minimization: ID de sujeto seudonimizado; separación de tabla de identidad. 
● Observabilidad: trazas por request con subject_pseudo_id, sin PII en logs. 
● CI: lint, tests, SCA, SBOM, firmas, despliegue gated. 
Arquitectura (alto nivel) 
● FE (web/app) ⇄ API consent-svc ⇄ Postgres (consent records, policy versions) 
● Event bus: publica decisiones para otros servicios (analytics, marketing, research) que 
deben respetar effective_consent. 
● Auditoría on‑chain: job agrega eventos recientes → Merkle root → 
ConsentAnchor.storeRoot(root, batchId) → Tx hash reportado en /audit. 
● DSAR/Exports: endpoint firmado + descarga; nunca expone PII no necesaria. 
Modelo de datos (resumen) 
● purpose (v): id, clave, base legal (consentimiento/LI/contrato), región/edad, versión. 
● data_category (v): id, clave (ej. email, id_wallet, ip, device_id, 
onchain_activity_bucket). 
● processing_use (v): clave de uso (analytics, personalization, marketing, research, 
notifications, security_antiabuse, strictly_necessary). 
● policy_matrix (v): combinación permitida (con textos y toggles por región). 
● consent_record: sujeto, propósito, data_category, processing_use, estado 
(granted/denied/limited/withdrawn), policy_version, timestamps, expiry opcional, 
receipt_id. 
● consent_event: evento inmutable con payload normalizado, event_hash, 
prev_hash (hash encadenado por sujeto), firma servidor, anchor_batch_id nullable, 
tx_hash nullable. 
● gpc_signal: sujeto/visitor, user_agent, proof, timestamp, honored=true/false y motivo. 
Nota: tablas subject_identity (PILAR IDENTIDAD) separadas y cifradas; el 
servicio trabaja con subject_pseudo_id. 
API (OpenAPI 3.1 – extracto esencial) 
Rutas clave: 
● GET /v1/consent/catalog — propósitos, categorías, usos y matriz efectiva por 
región/edad. 
● GET /v1/consent/{subjectId} — estado efectivo granular. 
● POST /v1/consent/{subjectId}/decisions — set de decisiones atómicas 
(transaccional). 
● POST /v1/consent/signals/gpc — registrar señal GPC. 
● POST /v1/consent/{subjectId}/withdraw — revocar todo (salvo “estrictamente 
necesario” y obligaciones legales). 
● GET /v1/consent/{subjectId}/audit — feed paginado de eventos con hashes y, 
cuando aplique, tx_hash. 
● GET /v1/consent/{subjectId}/export — descarga CSV/JSON 
(firmada/expirable). 
● GET /v1/consent/audit/batches — lotes anclados (Merkle root, block no., tx). 
Archivos y Código (ready-to-paste) 
Backend — servicio de consentimiento 
