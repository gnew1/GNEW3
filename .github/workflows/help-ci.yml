name: Help Center CI
on:
  pull_request:
    paths: ["apps/web/content/help/**","apps/web/src/modules/help/**","tools/**","services/helpdesk/**"]
  push:
    branches: [main]
    paths: ["apps/web/content/help/**","services/helpdesk/**","tools/**"]

jobs:
  validate-and-build-index:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Install
        run: pnpm i
      - name: Validate freshness & owners
        run: pnpm tsx tools/validate-help-freshness.ts
      - name: Build semantic index
        run: pnpm tsx tools/build-help-index.ts

  helpdesk-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gnew
        ports: ["5432:5432"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Install
        working-directory: services/helpdesk
        run: npm ci
      - name: Migrate
        working-directory: services/helpdesk
        env: { DATABASE_URL: postgres://postgres:postgres@localhost:5432/gnew }
        run: npm run migrate
      - name: Build
        working-directory: services/helpdesk
        run: npm run build

 
10) DoD (Definition of Done)
●	✅ Knowledge base navegable en /help con búsqueda semántica (embeddings locales) y i18n/a11y.

●	✅ Guía “Cómo empezar” publicada y enlazada desde onboarding.

●	✅ Widget contextual visible en todas las pantallas, mostrando sugerencias por pantalla y por error/evento.

●	✅ Feedback por artículo capturado y consultable (score 1–5 + texto).

●	✅ Flujos de ticket L1 desde artículos (creación + mensajes).

●	✅ Freshness/owners validados en CI; build falla si falta owner o si lastReviewed > 90 días.

●	✅ Observabilidad (Prometheus) y paneles Grafana.

●	🎯 KPI: reducción de tickets L1 ≥ X% vs baseline de 4 semanas (definir X con Soporte/Data).

 
11) Riesgos & Controles
●	Documentación obsoleta → Control: validate-help-freshness.ts + owner obligatorio + “last reviewed”.

●	Sesgo en recomendaciones → Control: búsquedas semánticas locales, lista blanca por audiencia, auditoría mensual de consultas/tasa de éxito.

●	Privacidad (GDPR) → Control: no PII en feedback; user_anon_id seudónimo; retención mínima; ticket opcional sin cuenta.

●	Sobrecarga en soporte → Control: escalado automático a L1 solo tras intentos fallidos y lectura de artículo.

 
12) Notas de integración con N51–N57
●	N51 Web: HelpProvider + HelpWidget incluidos en layout; atajos ?help=slug abren artículo directo.

●	N53 Onboarding: enlaces contextuales a “getting-started”.

●	N54 Learning: artículos “cómo” embebibles en tutoriales; compartir componentes MDX (Callout, VideoPlayer).

●	N55 Gamificación: puntos simbólicos al usuario que lee y resuelve sin abrir ticket (evento help_resolved).

●	N56 DID Auth: ticket anónimo permitido; si el usuario inicia sesión, adjunta sub (DID) como user_anon_id.

●	N57 Personalización: prioridad en resultados según rol/actividad (se puede alimentar ranking local con señales).

 
¿Quieres que agregue un script de migración de tickets a tu CRM o un bot de respuestas sugeridas (retrieval augmented sobre la KB) para L1? Puedo incluirlo en el mismo estilo.
Tú dijiste:
programa a nivel de detalle para gnew N58 6.8 Centro de ayuda interactivo (Prompt 58) Objetivo: Ayuda contextual, buscador semántico y flujos de soporte. Roles: Soporte, Tech Writer, Frontend, Data. Stack: MDX, embeddings locales, feedback por artículo. Entregables: Knowledge base, guía “cómo empezar”, flujos de ticket. Pasos: Widget de ayuda contextual por pantalla. Recomendaciones según error/evento. Pruebas / DoD: Reducción tickets L1 ≥ X%. Riesgos & Controles: Documentación obsoleta → owners por sección.
ChatGPT Plus
Pensó durante 36s
