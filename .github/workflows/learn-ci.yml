name: Learn Content CI
on:
  pull_request:
    paths: ["apps/web/content/**", "apps/web/src/modules/learn/**", "tools/**", ".github/workflows/learn-ci.yml"]
  push:
    branches: [main]
    paths: ["apps/web/content/**", "tools/**"]

jobs:
  validate-index:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Install deps
        run: |
          pnpm i
      - name: Validate freshness
        run: pnpm tsx tools/validate-content.ts
      - name: Build semantic index
        run: pnpm tsx tools/build-embedding-index.ts

 
Pruebas / DoD (Definition of Done)
●	✅ Biblioteca visible en /learn con filtros por rol, búsqueda semántica y metadatos (version, lastReviewed).

●	✅ Rutas de aprendizaje por rol en /learn/path/:role.

●	✅ Plantillas MDX con quizzes, vídeo y callouts; progreso guardado (SCORM lite), skip/retomar natural.

●	✅ Tracking Amplitude de inicio → finalización, satisfacción (1–5).

●	✅ On chain opcional: botón de insignia soulbound (mint controlado por relayer/rol MINTER_ROLE).

●	✅ Contenidos al día: validación de lastReviewed en CI; índice semántico generado en cada PR.

●	🎯 KPIs: tasa de finalización ≥ X%, satisfacción ≥ Y/5 (configurar metas exactas).

 
Riesgos & Controles
●	Desactualización → Control: tools/validate-content.ts + campo lastReviewed; PRs bloquean si >90 días.

●	Sobrecarga cognitiva → Control: vídeos < 90s, secciones cortas, quizzes de 1–3 preguntas.

●	Baja conversión → Control: A/B por feature flags (activar/desactivar quizzes, orden), re engagement desde /onboarding (email/push).

●	Privacidad → Control: no PII en localStorage (solo estado de tutorial); analítica con IDs seudónimos.

●	Abuso de badges → Control: claim vía backend/relayer con MINTER_ROLE; validación de score/slug y anti replay.

 
¿Te agrego ahora un tercer tutorial MDX por rol “validator” y el hls.js opcional para streams .m3u8? Puedo incluirlos en el mismo formato.
Tú dijiste:
programa a nivel de detalle para gnew N55 6.5 Gamificación (Prompt 55) Objetivo: Puntos, niveles y logros no-especulativos para motivar. Roles: Producto, Frontend, Backend, Legal. Stack: Módulo badges (soulbound), tabla de misiones, anti-abuso. Entregables: Catálogo de logros, reglas transparentes, perfiles públicos. Pasos: Definir economía blanda (no convertible) y antigrind. Integrar con onboarding y gobernanza (misiones útiles). Moderación automática (detección de farming). Pruebas / DoD: Retención +Δ, sin incentivos perversos. Riesgos & Controles: Desalineación → comité de diseño; abuso → límites diarios.
ChatGPT Plus
Pensó durante 37s
Ruta completa: .\docs\programas\N55-gamificacion.md
GNEW N55 — 6.5 Gamificación (Prompt 55)
Objetivo
Diseñar e implementar un sistema de puntos, niveles y logros no especulativos que incremente la motivación intrínseca y la participación útil en GNEW, sin crear incentivos financieros ni dinámicas de “grind”. La gamificación debe alinearse con onboarding, gobernanza y calidad de contribuciones, respetando GDPR by design y accesibilidad.
Roles responsables
●	Producto (owner): visión, catálogo de logros, reglas y KPIs.

●	Frontend: UI/UX de perfiles, progreso, toasts/badges, checklist y páginas públicas.

●	Backend: APIs, motor de reglas, antifraude, almacenamiento y eventos.

●	Legal & Privacidad: revisión de reglas, textos y tratamiento de datos.

●	Data/ML (apoyo): scoring antigrind/farming y métricas de impacto.

●	Accesibilidad: validación WCAG 2.2 AA en UI gamificada.

●	QA: pruebas funcionales, visuales y E2E.

Stack & convenciones
●	Frontend: React 18 + Vite, TypeScript, Zustand/Redux Toolkit, React Query, React Router, i18n. Storybook + Playwright (regresión visual). ESLint/Prettier.

●	Backend: Node.js (Express/Fastify) o FastAPI donde aplique, OpenTelemetry → Prometheus/Grafana, PostgreSQL/SQLModel, Redis para rate limits/contadores, NATS para eventos (si está habilitado).

●	On chain (opcional): CosmWasm módulo soulbound badges (no transferibles) gatillados por eventos verificados.

●	Antiabuso: límites diarios/por evento, detección de anomalías (z scores/percentiles), moderación automática y colas de revisión humana.

●	Seguridad SC: OpenZeppelin like patterns, checks effects interactions, custom errors (si aplica a contratos).

●	Integración global (obligatoria):

○	Repo: main protegido; GitFlow; PRs con checks (lint, unit, security).

○	CI/CD: GitHub Actions matriz (node/solc), deploy gated por Seguridad + Gobernanza.

○	Secrets: OIDC + Vault (services/common/vault.*), nada de claves en repos.

○	Docs: Docusaurus con secciones “Arquitectura”, “Contratos”, “APIs”, “Runbooks”.

○	Observabilidad: trazas por request/tx (OTel), dashboards en Grafana.

○	Accesibilidad & i18n: desde el primer sprint.

○	Legal & privacidad: GDPR by design, minimización y seudonimización.

○	DoD genérico: código + tests + docs + dashboards + playbooks; demo reproducible en entorno limpio.

Entregables
1.	Catálogo de logros y misiones

○	Tipos: participación útil, calidad (peer review), gobernanza (propuestas/votos), contribuciones técnicas (PRs, issues), aprendizaje (tutoriales).

○	Reglas transparentes por logro (criterios, cooldowns, límites diarios).

2.	Economía blanda (no convertible)

○	Puntos (soft currency), Niveles, Rachas (streaks) con antigrind.

3.	Módulo de Badges (soulbound)

○	Contrato CosmWasm opcional para logros clave (no transferibles).

○	Espejo off chain para consulta rápida y privacidad.

4.	Perfiles públicos con privacidad granular (opt in), vitrina de logros y progreso.

5.	APIs (/v1/gamification/*) y SDK (frontend) para consultar/progresar.

6.	Motor de reglas (event driven) con antifraude y auditoría.

7.	Integración con Onboarding y Gobernanza

○	Misiones “útiles” conectadas a flujos reales (e.g., revisar una propuesta).

8.	Dashboards (métricas de retención, conversión, abuso) y Runbooks.

Pasos clave
1.	Descubrimiento & alineación (Producto + Legal + Accesibilidad)

○	Definir KPIs: retención D30, DAU/WAU, % conversión onboarding→actividad, calidad (ratio PRs merged, votos válidos).

○	Mapa de riesgos (perversos incentivos, spam, privacidad).

2.	Diseño de la economía blanda

○	Tabla de recompensas por evento, decreciente por repetición, cooldowns y límites diarios.

○	Antigrind: función de utilidad cóncava (p.ej., reward = base * 1/√(1+rep_evento_dia)).

3.	Modelo de datos (PostgreSQL)

○	users(id, …)

○	events(id, user_id, kind, meta, ts)

○	rules(id, kind, expr_json, cooldown_s, daily_cap, weight)

○	points_ledger(id, user_id, delta, reason, ts, source_event_id, reviewer_id)

○	levels(user_id, level, xp, ts)

○	badges(id, code, title, sbt, criteria_json)

○	user_badges(user_id, badge_id, ts, onchain_tx_hash?, visibility)

○	abuse_flags(id, user_id, reason, score, ts)

○	Índices por user_id, kind, ts; auditoría append only en points_ledger.

4.	Motor de reglas (event driven)

○	Consumir eventos (NATS/Kafka opcional): onboarding, PR merged, voto, tutorial completado.

○	Evaluación idempotente (hash de evento + regla), transacciones atómicas y tracing (OTel).

5.	Módulo antifraude

○	Rate limits por kind/user (Redis).

○	Heurísticas: Co ocurrencias sospechosas, repetición mecánica, umbral de similitud en contribuciones.

○	Marcado para revisión humana y shadow penalties (no otorgar puntos hasta validación).

6.	Badges soulbound (opcional pero recomendado)

○	Contrato CosmWasm no transferible (roles minter=backend).

○	Cláusulas de privacidad: opt in, posibilidad de ocultar en perfil aunque emitido on chain.

7.	Frontend

○	Kit de componentes: ProgressRing, Badge, AchievementCard, Streak, LevelPill.

○	Páginas: Perfil público, Mis logros, Misiones (lista + detalle), Reglas (transparencia).

○	i18n (plural rules), a11y (navegación teclado, contrastes, ARIA).

8.	Integración con Onboarding y Gobernanza

○	Misiones iniciales con valor real (vincular tutoriales/micro learning N54 y onboarding N53).

○	Deep links a acciones (web/móvil RN).

9.	Observabilidad & Datos

○	Métricas: gamification_points_awarded_total, abuse_flags_total, daily_active_questers, streak_breaks_total.

○	Dashboards Grafana + trazas por evaluación de reglas.

10.	Docs & Playbooks

●	Docusaurus: Arquitectura, APIs, catálogo de logros, “How to add a rule”, Runbook antifraude.

Pruebas / DoD
●	Lighthouse ≥ 90 (a11y/PWA) en páginas gamificadas.

●	Cobertura > 80% (unit + integration + E2E Playwright/Detox móvil).

●	Regresión visual en Storybook (chromatic/Playwright).

●	Seguridad: SAST/DAST, zero high/critical pendientes; contratos con slither/echidna si aplica.

●	Carga: p95 < 200 ms para /v1/gamification/* (cache/indices).

●	Antiabuso: tests de límites, idempotencia, colisiones, replay.

●	Privacidad: tests de seudonimización y controles de visibilidad.

●	Observabilidad: métricas y trazas visibles en Grafana; alertas en Prometheus.

●	Entrega: código + tests + docs + dashboards + runbooks; demo reproducible.

Riesgos & Controles
●	Desalineación de incentivos → Comité de diseño (Producto + Legal + Comunidad) con revisiones quincenales; reglas versionadas y públicas.

●	Farming/abuso → límites diarios, shadow penalties, colas de revisión, detección de anomalías y baneo escalonado.

●	Sobrecarga cognitiva → micro tareas y feedback claro; opciones de silenciar toasts.

●	Privacidad → opt in para perfil público y badges on chain; datos mínimos y seudónimos.

●	Riesgos legales → sin canje ni equivalencia económica; textos de términos revisados por Legal.

 
API (borrador)
POST /v1/gamification/events
Registra un evento user action.
{ "userId": "alice", "kind": "vote_cast", "meta": { "proposalId": "p123" }, "ts": "ISO-8601" }

201 → evalúa reglas, otorga puntos/logros de forma idempotente.
GET /v1/gamification/progress/:userId
Devuelve puntos, nivel, racha y últimos logros.
GET /v1/gamification/badges/:userId?public=true
Lista badges (filtrables por visibilidad).
POST /v1/gamification/mint-badge (si on chain)
Solo backend con rol minter. Body: { userId, badgeCode }.
 
Esquema de reglas (ejemplos)
{
  "code": "VOTE_QUALITY",
  "kind": "vote_cast",
  "criteria": { "minProposalAgeHours": 24, "uniquePerProposal": true },
  "reward": { "points": 5, "cooldown_s": 3600, "daily_cap": 15 },
  "anti_grind": { "decay": "sqrt" },
  "audit": true
}

 
Contrato SBT (CosmWasm) — interfaz mínima (opcional)
●	mint_sbt { to, badge_code } (solo minter)

●	revoke_sbt { token_id } (para fraude comprobado)

●	query: { sbt_of { address } }

●	No transfer implementado; metadatos con criteria_uri.

 
Métricas (Prometheus)
●	gam_points_awarded_total{kind, rule_code}

●	gam_badges_minted_total{badge_code}

●	gam_abuse_flags_total{reason}

●	gam_rule_eval_duration_seconds (histograma)

●	service_info{service_name="gamification",environment}

 
Plan de sprints (8–10 semanas)
●	S1: Catálogo de logros, KPIs, riesgos, esquema datos.

●	S2: Motor de reglas + eventos + idempotencia + métricas.

●	S3: Antiabuso (rate limit, heurísticas) + auditoría.

●	S4: UI (perfil, logros, misiones) + i18n + a11y.

●	S5: Integración con Onboarding (N53) y Tutoriales (N54).

●	S6: SBT opcional + perfiles públicos + privacidad granular.

●	S7: Observabilidad completa + dashboards + runbooks.

●	S8: Hardening, carga, seguridad, beta pública.

 
CI/CD y gobernanza técnica
●	GitHub Actions: matrices node/solc; jobs: install→lint→test→build→sec (SAST, dep audit)→e2e→container scan.

●	Gates: aprobación Seguridad + Gobernanza para producción.

●	Secrets: OIDC a Vault; prohibido .env en repo.

●	Artefactos: imágenes con etiqueta git sha + semver; SBOM adjunto.

 
Runbooks (resumen)
●	“Añadir una regla nueva”: editar rules (Docusaurus guía), crear test de idempotencia, actualizar Storybook con caso de UI.

●	“Investigar sospecha de farming”: consultar dashboard abuse_flags, extraer points_ledger por user, aplicar checklist de revisión, usar endpoint de revocación si SBT.

 
KPIs & éxito
●	Retención: Δ≥ X pp vs. baseline (definir X con Data).

●	Conversión onboarding→actividad: ≥ X%.

●	Incidentes por abuso: tendencia decreciente semana a semana.

●	Satisfacción (encuesta in product): ≥ Y/5.

Nota: Todos los parámetros X/Y quedan fijados por Producto/Data antes de S1 y documentados en Docusaurus.
 
Fin del programa N55.
Tú dijiste:
programa a nivel de detalle lo anterior
ChatGPT Plus
Pensó durante 55s
Perfecto. Aquí tienes el programa a nivel de detalle y entrega para GNEW · N55 — 6.5 Gamificación (Prompt 55), con rutas completas y código listo para backend (Node/TS + Postgres + Redis), frontend (React 18 + Vite/TS), reglas transparentes, módulo anti abuso, perfiles públicos, catálogo de logros y soporte opcional de badges soulbound (Solidity, rol minter en backend). Cumple los lineamientos globales (GitFlow, CI/CD, OIDC, observabilidad, a11y, GDPR).
 
Back end · Servicio “gamification”
Estructura
services/gamification/
  package.json
  tsconfig.json
  src/
    index.ts
    env.ts
    db.ts
    redis.ts
    otel.ts
    schema.ts
    rules.ts
    engine.ts
    moderation.ts
    routes/
      events.ts
      progress.ts
      catalog.ts
      profile.ts
      badges.ts
  migrations/
    001_init.sql
    002_seed_rules.sql
