name: security 
on: 
push: 
branches: [main, develop] 
pull_request: 
permissions: 
contents: read 
security-events: write     
# subir SARIF 
  id-token: write            # OIDC (cloud, escaneos externos sin 
secrets) 
 
jobs: 
  slither: 
    name: Slither (static) 
    runs-on: ubuntu-latest 
    steps: 
      - uses: actions/checkout@v4 
 
      - name: Setup pnpm 
        uses: pnpm/action-setup@v4 
        with: 
          version: 9 
 
      - name: Setup Node 
        uses: actions/setup-node@v4 
        with: 
          node-version: 20 
          cache: "pnpm" 
 
      - name: Install deps 
        run: pnpm install --frozen-lockfile 
 
      - name: Setup Foundry 
        uses: foundry-rs/foundry-toolchain@v1 
        with: 
          version: nightly 
 
      - name: Compile contracts (Hardhat) 
        run: pnpm --filter @gnew/contracts compile 
 
      - name: Run Slither 
        uses: crytic/slither-action@v0.3.1 
        with: 
          target: packages/contracts 
          slither-args: > 
            --sarif slither.sarif.json 
            --filter-paths 
"(node_modules|lib|out|artifacts/!(contracts|src))" 
          fail-on: high 
 
      - name: Upload SARIF 
        uses: github/codeql-action/upload-sarif@v3 
        with: 
          sarif_file: slither.sarif.json 
 
  mythril: 
    name: Mythril (symbolic) 
    runs-on: ubuntu-latest 
    steps: 
      - uses: actions/checkout@v4 
      - name: Install jq 
        run: sudo apt-get update && sudo apt-get install -y jq 
 
      - name: Analyze StakingManager 
        run: | 
          docker run --rm -v "$PWD":/project mythril/myth \ 
            analyze 
/project/packages/contracts/src/staking/StakingManager.sol \ 
            --solv 0.8.24 -o json > myth-staking.json 
          jq '.' myth-staking.json >/dev/null 
          COUNT=$(jq '[.issues[] | select(.severity=="High" or 
.severity=="Medium")] | length' myth-staking.json) 
          echo "High/Med findings (StakingManager): $COUNT" 
          test "$COUNT" -eq 0 
 
      - name: Analyze GnewGovToken 
        run: | 
          docker run --rm -v "$PWD":/project mythril/myth \ 
            analyze 
/project/packages/contracts/src/governance/GnewGovToken.sol \ 
            --solv 0.8.24 -o json > myth-gov.json 
          jq '.' myth-gov.json >/dev/null 
          COUNT=$(jq '[.issues[] | select(.severity=="High" or 
.severity=="Medium")] | length' myth-gov.json) 
          echo "High/Med findings (GnewGovToken): $COUNT" 
          test "$COUNT" -eq 0 
 
  echidna: 
    name: Echidna (property-based) 
    runs-on: ubuntu-latest 
    steps: 
      - uses: actions/checkout@v4 
      - name: Run Echidna (GnewGovToken) 
        run: | 
          docker run --rm -v "$PWD/packages/contracts":/src 
trailofbits/eth-security-toolbox:latest \ 
            bash -lc "cd /src && echidna-test 
./echidna/GnewGovTokenEchidna.sol \ 
              --contract GnewGovTokenEchidna --config 
./echidna/echidna.config.yaml" 
 
  secrets-scan: 
    name: Secret Scanner (Gitleaks) 
    runs-on: ubuntu-latest 
    steps: 
      - uses: actions/checkout@v4 
        with: 
          fetch-depth: 0 
      - name: Gitleaks 
        uses: gitleaks/gitleaks-action@v2 
        env: 
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: "true" 
          GITLEAKS_ENABLE_SUMMARY: "true" 
        with: 
          args: detect --no-banner --redact 
 
  gate: 
    name: Security Gate (must-pass) 
    runs-on: ubuntu-latest 
    needs: [slither, mythril, echidna, secrets-scan] 
    steps: 
      - run: echo "All security checks passed 
âœ”
 " 
 
