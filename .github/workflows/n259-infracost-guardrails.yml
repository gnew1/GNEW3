
###############################################################################
# GNEW • N259
# Infra Cost Guardrails (Infracost)
# - PR cost estimates for Terraform changes across repo
# - Comments on PR with detailed diff
# - Fails the check if thresholds exceeded (percent or absolute)
# - OIDC-ready (optional) for plans that need cloud auth
###############################################################################

name: infra-cost-guardrails

on:
  pull_request:
    branches: [ main ]
    paths:
      - "infra/**"
      - ".github/workflows/**"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  # Thresholds (override per-repo in Actions variables)
  MAX_PERCENT_INCREASE: "10"     # % allowed increase vs base
  MAX_ABSOLUTE_INCREASE: "200"   # $/mo absolute increase allowed
  TF_VERSION: "1.6.6"

jobs:
  discover-terraform-dirs:
    name: Discover Terraform directories
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - id: set-matrix
        name: Build matrix of changed Terraform dirs
        shell: bash
        run: |
          # Find dirs that contain *.tf touched by the PR. Fallback to infra/terraform if none.
          set -euo pipefail
          base="${{ github.base_ref }}"
          head="${{ github.sha }}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            DIFF="$(git diff --name-only origin/${base}...${head} || true)"
          else
            DIFF="$(git diff --name-only HEAD~1 || true)"
          fi
          mapfile -t DIRS < <(echo "$DIFF" | grep -E '\.tf$' | xargs -r -n1 dirname | sort -u | sed 's#^#./#')
          if [[ ${#DIRS[@]} -eq 0 ]]; then
            DIRS=( "./infra/terraform/stacks/multicloud-foundation" )
          fi
          # Keep only directories that actually contain *.tf
          KEEP=()
          for d in "${DIRS[@]}"; do
            if compgen -G "$d/*.tf" > /dev/null; then
              KEEP+=("$d")
            fi
          done
          if [[ ${#KEEP[@]} -eq 0 ]]; then
            KEEP=( "./infra/terraform/stacks/multicloud-foundation" )
          fi
          printf 'Matrix dirs:\n%s\n' "${KEEP[@]}"
          JSON=$(printf '%s\n' "${KEEP[@]}" | jq -R . | jq -s '{dir: .}')
          echo "matrix=${JSON}" >> "$GITHUB_OUTPUT"

  plan-and-cost:
    name: Plan & Cost (${{ matrix.dir }})
    runs-on: ubuntu-latest
    needs: discover-terraform-dirs
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover-terraform-dirs.outputs.matrix) }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Optional OIDC auth to clouds (skips if secrets not set)
      - name: Configure AWS Credentials (OIDC)
        if: ${{ secrets.AWS_ROLE_ARN != '' && secrets.AWS_REGION != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Authenticate to GCP via OIDC
        if: ${{ secrets.GCP_WORKLOAD_PROVIDER != '' && secrets.GCP_SERVICE_ACCOUNT != '' }}
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Terraform init
        working-directory: ${{ matrix.dir }}
        run: terraform init -input=false || terraform init -backend=false -input=false

      - name: Terraform validate
        working-directory: ${{ matrix.dir }}
        run: terraform validate

      - name: Terraform plan (no changes applied)
        working-directory: ${{ matrix.dir }}
        run: |
          terraform plan -input=false -lock=false -out=plan.tfplan || true
          terraform show -json plan.tfplan > plan.json || echo '{}' > plan.json

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Infracost diff (JSON)
        id: costjson
        working-directory: ${{ matrix.dir }}
        run: |
          infracost diff \
            --path plan.json \
            --format json \
            --out-file /tmp/infracost_${{ matrix.dir//\//_ }}.json \
            --usage-file ./infracost-usage.yml || true
          echo "json=/tmp/infracost_${{ matrix.dir//\//_ }}.json" >> "$GITHUB_OUTPUT"

      - name: Infracost comment on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: infracost/actions/comment@v2
        with:
          path: ${{ steps.costjson.outputs.json }}
          behavior: update
          target: ${{ matrix.dir }}
          # Show detailed breakdown & policy results (if any)
          show-skipped: true

      - name: Enforce cost guardrails
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          set -euo pipefail
          FILE="${{ steps.costjson.outputs.json }}"
          if [[ ! -s "$FILE" ]]; then
            echo "No Infracost JSON produced; skipping enforcement."
            exit 0
          fi
          # Extract deltas
          pct=$(jq -r '.diff.totalMonthlyCost.percent / 1' "$FILE" 2>/dev/null || echo 0)
          abs=$(jq -r '.diff.totalMonthlyCost.amount / 1' "$FILE" 2>/dev/null || echo 0)
          pct=${pct:-0}; abs=${abs:-0}
          echo "Detected cost delta: ${pct}% ; $${abs}/mo"
          # Normalize negative changes to zero for enforcement
          pct_cmp=$(awk -v p="$pct" 'BEGIN{ if(p<0) print 0; else print p }')
          abs_cmp=$(awk -v a="$abs" 'BEGIN{ if(a<0) print 0; else print a }')
          max_pct=${MAX_PERCENT_INCREASE}
          max_abs=${MAX_ABSOLUTE_INCREASE}
          fail=0
          awk -v p="$pct_cmp" -v max="$max_pct" 'BEGIN{ if (p>max) exit 1 }' || fail=1
          awk -v a="$abs_cmp" -v max="$max_abs" 'BEGIN{ if (a>max) exit 1 }' || fail=1
          if [[ $fail -eq 1 ]]; then
            echo "::error title=Infracost guardrails violated::%Δ=${pct_cmp}% (max ${max_pct}%), Δ=$${abs_cmp}/mo (max $${max_abs}/mo)"
            exit 1
          else
            echo "Infracost guardrails OK: %Δ=${pct_cmp}<=${max_pct}, Δ=$${abs_cmp}<=$${max_abs}"
          fi


