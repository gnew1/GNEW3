  metro.config.js
  android/        # generado por EAS (bare cuando aplique)
  ios/            # idem
  assets/
    icon.png
    splash.png
  src/
    App.tsx
    theme/tokens.ts
    theme/index.ts
    i18n/index.ts
    navigation/index.tsx
    navigation/linking.ts
    screens/OnboardingScreen.tsx
    screens/LoginScreen.tsx
    screens/HomeScreen.tsx
    screens/GovernanceScreen.tsx
    screens/WalletScreen.tsx
    screens/SettingsScreen.tsx
    components/Button.tsx
    components/Card.tsx
    services/api.ts
    services/notifications.ts
    services/wallet.ts
    services/auth.ts
    state/store.ts
    state/queryClient.ts
    storage/persist.ts
  e2e/
    firstRun.e2e.ts
    init.ts
.github/
  workflows/mobile-ci.yml

 
1) Configuración Expo, deep links, permisos, PWA/dev-client
Ruta completa: apps/mobile/app.config.ts
import { ExpoConfig } from "expo/config";

const scheme = "gnew";
const webDomain = "app.gnew.org"; // TODO: sustituir por dominio real

const config: ExpoConfig = {
  name: "GNEW",
  slug: "gnew",
  version: "1.0.0",
  orientation: "portrait",
  icon: "./assets/icon.png",
  scheme,
  userInterfaceStyle: "automatic",
  jsEngine: "hermes",
  platforms: ["ios", "android", "web"],
  splash: { image: "./assets/splash.png", resizeMode: "contain", backgroundColor: "#0b1324" },
  updates: { fallbackToCacheTimeout: 0 },
  assetBundlePatterns: ["**/*"],
  ios: {
    bundleIdentifier: "org.gnew.app",
    supportsTablet: true,
    associatedDomains: [`applinks:${webDomain}`], // universal links
    infoPlist: {
      UIBackgroundModes: ["fetch", "remote-notification"],
      NSFaceIDUsageDescription: "We use Face ID to secure your wallet keys."
    }
  },
  android: {
    package: "org.gnew.app",
    adaptiveIcon: { foregroundImage: "./assets/icon.png", backgroundColor: "#0b1324" },
    useNextNotificationsApi: true,
    intentFilters: [
      {
        action: "VIEW",
        autoVerify: true,
        data: [{ scheme, host: webDomain, pathPrefix: "/" }, { scheme }],
        category: ["BROWSABLE", "DEFAULT"]
      }
    ],
    permissions: ["USE_BIOMETRIC", "RECEIVE_BOOT_COMPLETED"]
  },
  web: {
    bundler: "metro",
    output: "static"
  },
  plugins: [
    [
      "expo-notifications",
      { icon: "./assets/icon.png", color: "#5b9dff" }
    ],
    "expo-local-authentication",
    "expo-secure-store",
    "@react-native-async-storage/async-storage"
  ],
  extra: {
    apiBase: "https://api.gnew.org", // TODO: inyectar en CI
    wcProjectId: "WALLETCONNECT_PROJECT_ID" // TODO: secret EAS
  }
};

export default config;

Ruta completa: apps/mobile/package.json
{
  "name": "@gnew/mobile",
  "private": true,
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "expo start",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web",
    "build": "expo export",
    "test:e2e": "detox test -c android.emu.release",
    "build:e2e:android": "detox build -c android.emu.release",
    "predev": "node -e \"console.log('Ensure expo-doctor passes')\""
  },
  "dependencies": {
    "expo": "~51.0.28",
    "expo-dev-client": "~4.0.28",
    "expo-linking": "~6.3.1",
    "expo-local-authentication": "~14.11.1",
    "expo-notifications": "~0.28.19",
    "expo-secure-store": "~13.0.2",
    "i18next": "23.15.1",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-native": "0.74.5",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-get-random-values": "^1.11.0",
    "react-native-reanimated": "~3.10.1",
    "react-native-safe-area-context": "4.10.5",
    "react-native-screens": "~3.31.1",
    "@react-navigation/native": "^6.1.18",
    "@react-navigation/native-stack": "^6.10.1",
    "@tanstack/react-query": "5.59.16",
    "@tanstack/react-query-persist-client": "5.59.16",
    "@react-native-async-storage/async-storage": "1.23.1",
    "react-i18next": "14.1.2",
    "zustand": "4.5.4",
    "axios": "1.7.7",
    "ethers": "6.13.2",
    "@walletconnect/react-native-compat": "2.12.3",
    "@walletconnect/modal-react-native": "2.6.4"
  },
  "devDependencies": {
    "@types/react": "18.3.12",
    "@types/react-native": "0.73.0",
    "typescript": "5.6.2",
    "detox": "20.14.0",
    "jest": "29.7.0",
    "babel-jest": "29.7.0"
  }
}

Ruta completa: apps/mobile/tsconfig.json
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "baseUrl": "./",
    "paths": {
      "@theme/*": ["src/theme/*"],
      "@i18n/*": ["src/i18n/*"],
      "@nav/*": ["src/navigation/*"],
      "@screens/*": ["src/screens/*"],
      "@services/*": ["src/services/*"],
      "@state/*": ["src/state/*"],
      "@storage/*": ["src/storage/*"],
      "@components/*": ["src/components/*"]
    }
  }
}

Ruta completa: apps/mobile/babel.config.js
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ["babel-preset-expo"],
    plugins: ["react-native-reanimated/plugin"]
  };
};

Ruta completa: apps/mobile/eas.json
{
  "cli": { "version": ">= 13.0.0" },
  "build": {
    "development": { "developmentClient": true, "distribution": "internal", "autoIncrement": "version" },
    "preview": { "distribution": "internal" },
    "production": {
      "env": { "API_BASE": "https://api.gnew.org", "WC_PROJECT_ID": "WALLETCONNECT_PROJECT_ID" }
    }
  },
  "submit": {
    "production": {}
  }
}

 
2) Tema, tokens, i18n
Ruta completa: apps/mobile/src/theme/tokens.ts
export const tokens = {
  color: {
    bg: { base: "#0b1324", surface: "#111a2d" },
    fg: { primary: "#e2e8f0", secondary: "#b8c1ce", brand: "#5b9dff", danger: "#ff6b6b" }
  },
  radius: { md: 12, lg: 18 },
  space: { sm: 8, md: 12, lg: 16, xl: 24 }
};

Ruta completa: apps/mobile/src/theme/index.ts
import { tokens } from "./tokens";
export const theme = tokens;

Ruta completa: apps/mobile/src/i18n/index.ts
import i18n from "i18next";
import { initReactI18next } from "react-i18next";

i18n.use(initReactI18next).init({
  resources: {
    es: { translation: { welcome: "Bienvenido a GNEW", login: "Entrar", approve: "Aprobar", vote: "Votar" } },
    en: { translation: { welcome: "Welcome to GNEW", login: "Sign in", approve: "Approve", vote: "Vote" } }
  },
  lng: "es",
  fallbackLng: "en",
  compatibilityJSON: "v4",
  interpolation: { escapeValue: false }
});

export default i18n;

 
3) Estado, React Query (offline-first), storage
Ruta completa: apps/mobile/src/state/store.ts
import { create } from "zustand";

type Role = "guest" | "member" | "admin";
type AuthState = { token: string | null; role: Role; setAuth: (t: string | null, r: Role) => void; logout: () => void; };

export const useAuth = create<AuthState>((set) => ({
  token: null, role: "guest",
  setAuth: (t, r) => set({ token: t, role: r }),
  logout: () => set({ token: null, role: "guest" })
}));

Ruta completa: apps/mobile/src/state/queryClient.ts
import { QueryClient } from "@tanstack/react-query";
export const queryClient = new QueryClient({
  defaultOptions: { queries: { retry: 1, staleTime: 30_000, gcTime: 5 * 60_000 } }
});

Ruta completa: apps/mobile/src/storage/persist.ts
import { createSyncStoragePersister } from "@tanstack/query-sync-storage-persister";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { PersistQueryClientProvider } from "@tanstack/react-query-persist-client";
import { queryClient } from "@state/queryClient";
import React from "react";

const persister = createSyncStoragePersister({ storage: AsyncStorage as any });

export function WithQueryPersist({ children }: { children: React.ReactNode }) {
  return (
    <PersistQueryClientProvider client={queryClient} persistOptions={{ persister, maxAge: 1000 * 60 * 60 }}>
      {children}
    </PersistQueryClientProvider>
  );
}

 
4) Servicios (API, auth/SIWE, wallet, notificaciones)
Ruta completa: apps/mobile/src/services/api.ts
import axios from "axios";
import Constants from "expo-constants";
import { useAuth } from "@state/store";

const baseURL = (Constants.expoConfig?.extra as any)?.apiBase || process.env.API_BASE || "http://10.0.2.2:8010";

export const api = axios.create({ baseURL, timeout: 8000 });

api.interceptors.request.use((cfg) => {
  const { token } = useAuth.getState();
  if (token) cfg.headers.Authorization = `Bearer ${token}`;
  return cfg;
});

Ruta completa: apps/mobile/src/services/auth.ts
import * as LocalAuthentication from "expo-local-authentication";
import { useAuth } from "@state/store";
import { api } from "./api";

export async function biometricGate(): Promise<boolean> {
  const available = await LocalAuthentication.hasHardwareAsync();
  if (!available) return true;
  const enrolled = await LocalAuthentication.isEnrolledAsync();
  if (!enrolled) return true;
  const res = await LocalAuthentication.authenticateAsync({ promptMessage: "Autenticación biométrica" });
  return res.success;
}

// Ejemplo SIWE minimal: el backend debe proveer nonce y verificar firma; aquí simulamos flujo
export async function siweLogin(address: string, signature: string) {
  const { data } = await api.post("/auth/siwe", { address, signature });
  useAuth.getState().setAuth(data.token, data.role || "member");
}

Ruta completa: apps/mobile/src/services/wallet.ts
import "react-native-get-random-values";
import * as SecureStore from "expo-secure-store";
import { ethers } from "ethers";

const KEY_NAME = "gnew_wallet_pk";

export type WalletInfo = { address: string };

export async function ensureWallet(): Promise<WalletInfo> {
  let pk = await SecureStore.getItemAsync(KEY_NAME, { requireAuthentication: true });
  if (!pk) {
    const wallet = ethers.Wallet.createRandom();
    await SecureStore.setItemAsync(KEY_NAME, wallet.privateKey, { requireAuthentication: true });
    pk = wallet.privateKey;
  }
  const w = new ethers.Wallet(pk!);
  return { address: await w.getAddress() };
}

export async function signMessage(message: string): Promise<string> {
  const pk = await SecureStore.getItemAsync(KEY_NAME, { requireAuthentication: true });
  if (!pk) throw new Error("No wallet");
  const wallet = new ethers.Wallet(pk);
  return await wallet.signMessage(message);
}

Ruta completa: apps/mobile/src/services/notifications.ts
import * as Notifications from "expo-notifications";
import { Platform } from "react-native";
import Constants from "expo-constants";
import { api } from "./api";

Notifications.setNotificationHandler({
  handleNotification: async () => ({ shouldShowAlert: true, shouldPlaySound: false, shouldSetBadge: false })
});

export async function registerPush(userId: string) {
  const { status } = await Notifications.requestPermissionsAsync();
  if (status !== "granted") return null;
  if (Platform.OS === "android") {
    await Notifications.setNotificationChannelAsync("default", {
      name: "Default",
      importance: Notifications.AndroidImportance.DEFAULT
    });
  }
  const token = (await Notifications.getExpoPushTokenAsync()).data;
  await api.post("/devices/register", { userId, token, platform: Platform.OS, app: "mobile" });
  return token;
}

 
5) Navegación, deep links, guardias
Ruta completa: apps/mobile/src/navigation/linking.ts
import * as Linking from "expo-linking";
const prefix = Linking.createURL("/");
export default {
  prefixes: [prefix, "gnew://", "https://app.gnew.org"],
  config: {
    screens: {
      Onboarding: "onboarding",
      Login: "login",
      Home: "home",
      Governance: "gov",
      Wallet: "wallet",
      Settings: "settings"
    }
  }
};

Ruta completa: apps/mobile/src/navigation/index.tsx
import React from "react";
import { NavigationContainer, DefaultTheme } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import linking from "./linking";
import OnboardingScreen from "@screens/OnboardingScreen";
import LoginScreen from "@screens/LoginScreen";
import HomeScreen from "@screens/HomeScreen";
import GovernanceScreen from "@screens/GovernanceScreen";
import WalletScreen from "@screens/WalletScreen";
import SettingsScreen from "@screens/SettingsScreen";
import { useAuth } from "@state/store";

const Stack = createNativeStackNavigator();

export default function RootNavigator() {
  const { token } = useAuth();
  return (
    <NavigationContainer linking={linking} theme={{ ...DefaultTheme, colors: { ...DefaultTheme.colors, background: "#0b1324" } }}>
      <Stack.Navigator screenOptions={{ headerShown: false, animation: "fade" }}>
        {!token ? (
          <>
            <Stack.Screen name="Onboarding" component={OnboardingScreen} />
            <Stack.Screen name="Login" component={LoginScreen} />
          </>
        ) : (
          <>
            <Stack.Screen name="Home" component={HomeScreen} />
            <Stack.Screen name="Governance" component={GovernanceScreen} />
            <Stack.Screen name="Wallet" component={WalletScreen} />
            <Stack.Screen name="Settings" component={SettingsScreen} />
          </>
        )}
      </Stack.Navigator>
    </NavigationContainer>
  );
}

 
6) UI base + pantallas clave (onboarding, wallet, governance)
Ruta completa: apps/mobile/src/components/Button.tsx
import React from "react";
import { Pressable, Text, ActivityIndicator, StyleSheet } from "react-native";
import { theme } from "@theme/index";

export function Button({ label, onPress, loading }: { label: string; onPress?: () => void; loading?: boolean }) {
  return (
    <Pressable
      accessibilityRole="button"
      onPress={onPress}
      style={({ pressed }) => [styles.btn, { opacity: pressed || loading ? 0.7 : 1 }]}
      disabled={loading}
    >
      {loading ? <ActivityIndicator color="#0b1324" /> : <Text style={styles.label}>{label}</Text>}
    </Pressable>
  );
}
const styles = StyleSheet.create({
  btn: { paddingVertical: 12, paddingHorizontal: 16, borderRadius: theme.radius.md, backgroundColor: theme.color.fg.brand, alignItems: "center" },
  label: { color: "#0b1324", fontWeight: "700" }
});

Ruta completa: apps/mobile/src/components/Card.tsx
import React from "react";
import { View, Text, StyleSheet } from "react-native";
import { theme } from "@theme/index";

export function Card({ title, children }: { title?: string; children?: React.ReactNode }) {
  return (
    <View style={styles.card} accessible accessibilityLabel={title || "card"}>
      {title ? <Text style={styles.title}>{title}</Text> : null}
      {children}
    </View>
  );
}
const styles = StyleSheet.create({
  card: { backgroundColor: theme.color.bg.surface, borderRadius: theme.radius.lg, padding: theme.space.xl, marginBottom: theme.space.lg },
  title: { color: theme.color.fg.primary, fontSize: 18, fontWeight: "700", marginBottom: 8 }
});

Ruta completa: apps/mobile/src/screens/OnboardingScreen.tsx
import React from "react";
import { View, Text, StyleSheet } from "react-native";
import { Button } from "@components/Button";
import { useNavigation } from "@react-navigation/native";

export default function OnboardingScreen() {
  const nav = useNavigation<any>();
  return (
    <View style={styles.root}>
      <Text style={styles.h1}>GNEW</Text>
      <Text style={styles.p}>Gobernanza, wallet y notificaciones en tu móvil.</Text>
      <Button label="Comenzar" onPress={() => nav.navigate("Login")} />
    </View>
  );
}
const styles = StyleSheet.create({
  root: { flex: 1, alignItems: "center", justifyContent: "center", gap: 16, padding: 24, backgroundColor: "#0b1324" },
  h1: { color: "#e2e8f0", fontSize: 28, fontWeight: "800" },
  p: { color: "#b8c1ce", textAlign: "center" }
});

Ruta completa: apps/mobile/src/screens/LoginScreen.tsx
import React, { useState } from "react";
import { View, Text, StyleSheet, Alert } from "react-native";
import { Button } from "@components/Button";
import { biometricGate } from "@services/auth";
import { ensureWallet, signMessage } from "@services/wallet";
import { useAuth } from "@state/store";

export default function LoginScreen() {
  const [busy, setBusy] = useState(false);
  const { setAuth } = useAuth() as any;

  return (
    <View style={styles.root}>
      <Text style={styles.h1}>Protege tu acceso</Text>
      <Text style={styles.p}>Usaremos biometría y una wallet embebida para firmar el login.</Text>
      <Button
        label="Entrar con biometría"
        loading={busy}
        onPress={async () => {
          try {
            setBusy(true);
            const ok = await biometricGate();
            if (!ok) return;
            const { address } = await ensureWallet();
            const msg = `Sign-in to GNEW\nAddress:${address}\nNonce:12345`;
            const sig = await signMessage(msg);
            // Aquí llamarías a /auth/siwe para obtener token real
            setAuth("demo-token", "member");
            Alert.alert("Bienvenido", `Wallet ${address.slice(0, 10)}… conectada`);
          } catch (e: any) {
            Alert.alert("Error", e.message || "Fallo de login");
          } finally {
            setBusy(false);
          }
        }}
      />
    </View>
  );
}
const styles = StyleSheet.create({
  root: { flex: 1, alignItems: "center", justifyContent: "center", gap: 16, padding: 24, backgroundColor: "#0b1324" },
  h1: { color: "#e2e8f0", fontSize: 22, fontWeight: "800" },
  p: { color: "#b8c1ce", textAlign: "center" }
});

Ruta completa: apps/mobile/src/screens/HomeScreen.tsx
import React, { useEffect } from "react";
import { View, Text, StyleSheet, Pressable } from "react-native";
import { useNavigation } from "@react-navigation/native";
import { theme } from "@theme/index";

export default function HomeScreen() {
  const nav = useNavigation<any>();
  return (
    <View style={styles.root}>
      <Pressable style={styles.tile} onPress={() => nav.navigate("Governance")} accessibilityRole="button">
        <Text style={styles.t}>Gobernanza</Text>
      </Pressable>
      <Pressable style={styles.tile} onPress={() => nav.navigate("Wallet")} accessibilityRole="button">
        <Text style={styles.t}>Billetera</Text>
      </Pressable>
      <Pressable style={styles.tile} onPress={() => nav.navigate("Settings")} accessibilityRole="button">
        <Text style={styles.t}>Ajustes</Text>
      </Pressable>
    </View>
  );
}
const styles = StyleSheet.create({
  root: { flex: 1, flexDirection: "row", flexWrap: "wrap", gap: 12, padding: 16, backgroundColor: theme.color.bg.base },
  tile: { width: "47%", height: 120, backgroundColor: theme.color.bg.surface, borderRadius: 16, alignItems: "center", justifyContent: "center" },
  t: { color: theme.color.fg.primary, fontWeight: "700" }
});

Ruta completa: apps/mobile/src/screens/GovernanceScreen.tsx
import React from "react";
import { View, Text, FlatList, StyleSheet, Alert } from "react-native";
import { useQuery, useMutation } from "@tanstack/react-query";
import { api } from "@services/api";
import { Button } from "@components/Button";
import { theme } from "@theme/index";

type Proposal = { id: string; title: string; status: "active" | "closed"; end: string };

export default function GovernanceScreen() {
  const { data, isLoading, error } = useQuery({
    queryKey: ["proposals"],
    queryFn: async (): Promise<Proposal[]> => (await api.get("/gov/proposals")).data,
    placeholderData: []
  });

  const vote = useMutation({
    mutationFn: async ({ id, choice }: { id: string; choice: "yes" | "no" }) =>
      (await api.post(`/gov/proposals/${id}/vote`, { choice })).data,
    onSuccess: () => Alert.alert("Voto registrado")
  });

  if (isLoading) return <Text style={styles.p}>Cargando…</Text>;
  if (error) return <Text style={styles.err}>Error al cargar</Text>;

  return (
    <FlatList
      style={{ backgroundColor: theme.color.bg.base }}
      contentContainerStyle={{ padding: 16, gap: 12 }}
      data={data}
      keyExtractor={(p) => p.id}
      renderItem={({ item }) => (
        <View style={styles.item} accessible accessibilityLabel={`Propuesta ${item.title}`}>
          <Text style={styles.h2}>{item.title}</Text>
          <Text style={styles.p}>Estado: {item.status} · Cierre: {new Date(item.end).toLocaleString()}</Text>
          {item.status === "active" ? (
            <View style={{ flexDirection: "row", gap: 8 }}>
              <Button label="Sí" onPress={() => vote.mutate({ id: item.id, choice: "yes" })} />
              <Button label="No" onPress={() => vote.mutate({ id: item.id, choice: "no" })} />
            </View>
          ) : null}
        </View>
      )}
      ListEmptyComponent={<Text style={styles.p}>No hay propuestas</Text>}
    />
  );
}
const styles = StyleSheet.create({
  item: { backgroundColor: theme.color.bg.surface, borderRadius: 14, padding: 16 },
  h2: { color: theme.color.fg.primary, fontWeight: "800", fontSize: 18, marginBottom: 6 },
  p: { color: theme.color.fg.secondary },
  err: { color: theme.color.fg.danger }
});

Ruta completa: apps/mobile/src/screens/WalletScreen.tsx
import React, { useEffect, useState } from "react";
import { View, Text, StyleSheet, Clipboard, Alert } from "react-native";
import { ensureWallet } from "@services/wallet";
import { Button } from "@components/Button";
import { theme } from "@theme/index";

export default function WalletScreen() {
  const [addr, setAddr] = useState<string>("");

  useEffect(() => {
    (async () => {
      const { address } = await ensureWallet();
      setAddr(address);
    })();
  }, []);

  return (
    <View style={styles.root}>
      <Text style={styles.h2}>Tu dirección</Text>
      <Text selectable style={styles.addr}>{addr}</Text>
      <Button label="Copiar" onPress={() => { Alert.alert("Copiado", addr.slice(0, 12) + "…"); }} />
    </View>
  );
}
const styles = StyleSheet.create({
  root: { flex: 1, gap: 12, padding: 16, backgroundColor: theme.color.bg.base },
  h2: { color: theme.color.fg.primary, fontWeight: "800", fontSize: 18 },
  addr: { color: theme.color.fg.secondary }
});

Ruta completa: apps/mobile/src/screens/SettingsScreen.tsx
import React, { useEffect, useState } from "react";
import { View, Text, Switch, StyleSheet, Alert } from "react-native";
import { registerPush } from "@services/notifications";
import { theme } from "@theme/index";

export default function SettingsScreen() {
  const [push, setPush] = useState(false);

  useEffect(() => { /* cargar preferencia */ }, []);

  return (
    <View style={styles.root}>
      <View style={styles.row} accessibilityRole="switch">
        <Text style={styles.t}>Notificaciones</Text>
        <Switch value={push} onValueChange={async (v) => {
          setPush(v);
          if (v) {
            const tok = await registerPush("me"); // userId real desde auth
            Alert.alert("Push activadas", tok ? tok.slice(0, 10) + "…" : "sin token");
          }
        }} />
      </View>
    </View>
  );
}
const styles = StyleSheet.create({
  root: { flex: 1, padding: 16, backgroundColor: theme.color.bg.base },
  row: { flexDirection: "row", justifyContent: "space-between", alignItems: "center", paddingVertical: 8 },
  t: { color: theme.color.fg.primary, fontSize: 16 }
});

 
7) App root con providers y offline first
Ruta completa: apps/mobile/src/App.tsx
import React from "react";
import "@i18n/index";
import RootNavigator from "@nav/index";
import { WithQueryPersist } from "@storage/persist";

export default function App() {
  return (
    <WithQueryPersist>
      <RootNavigator />
    </WithQueryPersist>
  );
}

 
8) Detox E2E (smoke) + config
Ruta completa: apps/mobile/.detoxrc.json
{
  "testRunner": "jest",
  "runnerConfig": "e2e/init.ts",
  "apps": {
    "android.release": {
      "type": "android.apk",
      "build": "eas build --platform android --profile preview --local --non-interactive && ls ./dist/*.apk > .apkpath && echo built",
      "binaryPath": "dist/app-release.apk"
    }
  },
  "devices": {
    "android.emu": {
      "type": "android.emulator",
      "device": { "avdName": "Pixel_5_API_34" }
    }
  },
  "configurations": {
    "android.emu.release": {
      "device": "android.emu",
      "app": "android.release"
    }
  }
}

Ruta completa: apps/mobile/e2e/init.ts
import { detox } from "detox";
import adapter from "detox/runners/jest/adapter";
import specReporter from "detox/runners/jest/specReporter";

jest.setTimeout(120000);
jasmine.getEnv().addReporter(adapter);
jasmine.getEnv().addReporter(specReporter);

beforeAll(async () => { await detox.init(); }, 120000);
afterAll(async () => { await detox.cleanup(); });
afterEach(async () => { await adapter.afterEach(); });

Ruta completa: apps/mobile/e2e/firstRun.e2e.ts
describe("First Run", () => {
  it("shows onboarding and goes to login", async () => {
    await expect(element(by.text("GNEW"))).toBeVisible();
    await element(by.label("Comenzar")).tap();
    await expect(element(by.text("Protege tu acceso"))).toBeVisible();
  });
});

 
9) CI/CD móvil (matriz SO + linters básicos + Detox smoke)
