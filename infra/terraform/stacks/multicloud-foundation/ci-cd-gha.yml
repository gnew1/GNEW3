###############################################################################
# GNEW â€¢ N252
# GitHub Actions workflow for Terraform multicloud stack
# - Secure OIDC federation (AWS, GCP)
# - Validations: fmt, validate, tfsec
# - Plan on PR, Apply on main (protected)
# - State backend agnostic (S3/GCS/Local supported via backend-config)
###############################################################################

name: infra-multicloud

on:
  pull_request:
    branches: [ main ]
    paths:
      - "infra/terraform/stacks/multicloud-foundation/**"
  push:
    branches: [ main ]
    paths:
      - "infra/terraform/stacks/multicloud-foundation/**"
  workflow_dispatch:

permissions:
  id-token: write    # Required for OIDC
  contents: read

env:
  TF_DIR: infra/terraform/stacks/multicloud-foundation

jobs:
  validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform fmt
        run: terraform -chdir=${{ env.TF_DIR }} fmt -check -recursive

      - name: Terraform init
        run: terraform -chdir=${{ env.TF_DIR }} init -backend=false

      - name: Terraform validate
        run: terraform -chdir=${{ env.TF_DIR }} validate

      - name: tfsec Security Scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ${{ env.TF_DIR }}

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # AWS OIDC auth
      - name: Configure AWS Credentials (OIDC)
        if: env.AWS_ROLE_ARN != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # GCP OIDC auth
      - name: Authenticate to GCP via OIDC
        if: env.GCP_WORKLOAD_PROVIDER != ''
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Terraform init
        run: terraform -chdir=${{ env.TF_DIR }} init -input=false

      - name: Terraform plan
        run: terraform -chdir=${{ env.TF_DIR }} plan -input=false -no-color

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials (OIDC)
        if: env.AWS_ROLE_ARN != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Authenticate to GCP via OIDC
        if: env.GCP_WORKLOAD_PROVIDER != ''
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Terraform init
        run: terraform -chdir=${{ env.TF_DIR }} init -input=false

      - name: Terraform apply
        run: terraform -chdir=${{ env.TF_DIR }} apply -auto-approve -input=false

# note: narrative content removed; see docs/_imported/ci-cd-gha-notes.md

